import React from "react";
import CompanyIcon from "../../static/images/company_icon.svg";
import LocationIcon from "../../static/images/location.svg";
import logEvent from "../../lib/logEvent";
import handleJobClick from "../../lib/handleJobClick";
import Engagement_Metrics from "../../lib/Engagement_Metrics.service.js";

import styled, {keyframes} from 'styled-components';
import fetch from "isomorphic-fetch";

import {InView} from 'react-intersection-observer';


import styles from "./Job.module.css";
import MediumCard from "../../b2b/components/Cards/MediumCard";

const ContainerDiv = styled.div`
  max-width: 80%;
  @media (max-width: 500px) {
    max-width: 100%;
  }
`;

const OuterContainer = styled.div`
  display: flex;
  flex-direction: row;
  @media (max-width: 500px) {
    flex-direction: column;
  }
`;

const fadeIn = keyframes`

`;

const fadeOut = keyframes`
  from {
    opacity: 1;
  }

  50% {
    opacity: 0;
    -webkit-transform: scale3d(0.3, 0.3, 0.3);
    transform: scale3d(0.3, 0.3, 0.3);
  }

  to {
    opacity: 0;
  }
`;

const JobCard = styled.div`
  visibility: ${props => props.out ? 'hidden' : 'visible'};
  animation: ${props => props.out ? fadeOut : fadeIn} 1s linear;
  transition: visibility 1s linear;


  text-align: left;
  padding: 16px 32px 16px 16px;
  border-bottom: 0.5px solid #e2e2e3;
  position: relative;
  display: flex;
  flex-direction: column;
  box-shadow: 0px 4px 4px rgba(0, 6, 57, 0.12);
  border-radius: 10px;
  margin: 8px 0px;
  background-color: white;
  cursor: pointer;
  ${props => props.decoration === "star" && "border: #FFD104 3px solid;"}
  ${props => props.decoration === "firstToApply" && "border: #FE889B 3px solid;"} ${props => props.decoration === "hurry" && "border: #FF6C4B 3px solid;"} ${props => props.decoration === "hurry" && "flex-direction: column-reverse;"} ${props => props.decoration === "social" && "flex-direction: column-reverse;"} @media(max-width: 500 px) {
  flex-direction: column;
  padding: 16px 16px 16px 16px;
}
`;

const Title = styled.div`
  font-size: 18px;
  font-weight: bold;
  line-height: 22px;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 578px;
  ${props => props.decoration && "width: 90%;"}
`;

const JobAttributesContainer = styled.div`
  display: flex;
  flex-direction: row;
  max-width: 600px;
  margin-top: 10px;
  font-size: 14px;
  line-height: 24px;
  color: rgba(0, 6, 57, 0.6);
  height: 24px;
  text-indent: 4px;
  /* width: 90%; */
  /* display: -webkit-box; */
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
`;

const AttributeContainer = styled.div`
  display: flex;
  flex-direction: row;
`;

const Location = styled.div`
  /* width: 114px; */
  /* max-width: 120px; */
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-height: 24px;
  ${props => props.hasCompany && `max-width: 120px;`} @media(min-width: 500 px) {
  ${props => !props.hasCompany && `max-width: 180px;`}
}
  @media (min-width: 800px) {
    ${props => !props.hasCompany && `max-width: 400px;`}
  }
`;

const Company = styled.div`
  /* width: 114px; */
  /* max-width: 120px; */

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-height: 24px;
  @media (max-width: 700px) {
    ${props => props.hasLoaction && `max-width: 120px;`}
  }

`;

const Description = styled.div`
  letter-spacing: 0.4px;
  margin-top: 10px;
  margin-right: 32px;
  font-size: 14px;
  max-width: 866px;
  line-height: 20px;
  max-height: 100px;
  color: rgba(0, 6, 57, 0.6);
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  @media (max-width: 500px) {
    margin-bottom: 10px;
    margin-right: 0px;
  }
`;

const Button = styled.button`
  width: 130px;
  min-width: 210px;
  height: 46px;
  max-width: 130px;
  border-radius: 5px;
  cursor: pointer;
  font-weight: bold;
  font-size: 16px;
  line-height: 42px;
  color: white;
  border: none;
  margin: auto 0px auto auto;
  background: linear-gradient(45deg, #5765B5, #9CABFF, #5765B5);
    /* ${props => props.decoration === "trendingJob" && "background: linear-gradient(98.83deg, #FF9839 0%, #FF4D00 100%);"} */

  ${props => props.decoration === "gamified" && `
    background: linear-gradient(45deg, #FF006B, #FF71AC, #FF006B);
    font-size: 18px; !important
    `}
  &:hover {
  }

  @media (max-width: 500px) {
    width: 100%;
    height: 43px;
    max-width: 500px;
    margin-right: auto;
    margin-top: 10px;
  }

  /* animation */
  /* background: linear-gradient(180deg, #606fc7 0%, #5865c1 100%); */
  background-size: 400% 400% !important;
  -webkit-animation: glare 5s ease infinite !important;
  -moz-animation: glare 5s ease infinite !important;
  animation: glare 5s ease infinite !important;
  @-webkit-keyframes glare {
    0% {
      background-position: 0% 50%
    }
    50% {
      background-position: 100% 50%
    }
    100% {
      background-position: 0% 50%
    }
  }

  @-moz-keyframes glare {
    0% {
      background-position: 0% 50%
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%
    }
  }

  @keyframes glare {
    from, to {
      transform: translate3d(0, 0, 0)
    }
    0% {
      background-position: 0% 50%;
    }
    /* 20%{transform: translate3d(0, 0, 0)}
    30%{transform: translate3d(-10px, 0, 0)}
    40%{transform: translate3d(10px, 0, 0)} */
    50% {
      background-position: 100% 50%;
    }
    /* 60%{transform: translate3d(10px, 0, 0)}
    70%{ transform: translate3d(0, 0, 0)} */
    100% {
      background-position: 0% 50%;
    }
  }
`;

const ButtonIcon = styled.img`
  margin-left: 9px;
  height: 32px;
  width: auto;
  vertical-align: middle;
  display: inline-block;
`;

const JobDecorationLabelTopLeft = styled.img`
  margin-right: auto;
  margin-bottom: 11px;
`;

const JobDecorationLabelTopLeftDiv = styled.div`
  margin-right: auto;
  margin-bottom: 11px;
  border-radius: 5px;
  border: 1px solid rgba(0, 6, 57, 0.6);
  padding: 0px 5px;
  color: rgba(0, 6, 57, 0.6);
`;

const JobDecorationLabelTopRight = styled.img`
  position: absolute;
  right: 11px;
  top: 11px;
`;

const JobDecorationLabelBottomHurry = styled.div`
  display: flex;
  flex-direction: row;
  margin: 0px auto 10px 0px;
  font-family: Lato;
  font-weight: bolder;
  font-size: 14px;
  line-height: 20px;
  align-items: center;
  color: #ff0000;
  @media (max-width: 500px) {
    margin: 8px auto 0px auto;
  }
`;

const JobDecorationLabelBottomSocial = styled.div`
  display: flex;
  flex-direction: row;
  margin: 0px auto 10px 0px;
  font-family: Lato;
  font-weight: 500;
  font-size: 16px;
  line-height: 24px;
  align-items: center;
  color: #000639;
  @media (max-width: 500px) {
    margin: 8px auto 0px auto;
  }
`;


export default class Job extends React.Component {
    constructor(props) {

        //console.log("jobs joblist props ", props)

        super(props);

        this.didLogoFetch = false;

        this.state = {
            isSemiTransparent: false,
            logo: null,
            email_only_interval_key: null,
            display: props.display || true,
            out: false
        };


    }

    getBottomDecorationTag() {
        let element;
        if (this.props.decoration) {
            switch (this.props.decoration) {
                case "hurry":
                    element = (<JobDecorationLabelBottomHurry>
                        <img
                            src="/static/images/JobCardDecoration/hurry.svg"
                            style={{marginRight: "5px"}}
                        />
                        Hurry! accepting 2 last applicants
                    </JobDecorationLabelBottomHurry>);
                    break;
                case "social":
                    element = (<JobDecorationLabelBottomSocial>
                        <img
                            src="/static/images/social_group.png"
                            style={{height: "35px", width: "auto", marginRight: "6px"}}
                        />
                        17 people applied
                    </JobDecorationLabelBottomSocial>);
                    break;
                default:
                    break;
            }
        }
        return element;
    }

    getTopDecorationTag() {
        let element;

        let decoration = this.props.decoration;

        if (this.props.src == "MyJobQuote") {
            decoration = "immediateStart";
        }

        if (this.props.decoration) {
            switch (decoration) {
                case "serp":
                    element = (<JobDecorationLabelTopLeftDiv>Ad</JobDecorationLabelTopLeftDiv>);
                    break;
                case "highSalary":
                    element = (
                        <div className={styles.JobDecorationLabelTopLeft}>

                            <svg width="94" height="26" viewBox="0 0 94 26" fill="none"
                                 xmlns="http://www.w3.org/2000/svg">
                                <rect width="94" height="26" rx="5" fill="url(#paint2_linear)"/>
                                <path
                                    d="M30.5351 9.294V18H28.7231V14.25H24.8891V18H23.0771V9.294H24.8891V12.99H28.7231V9.294H30.5351ZM33.7523 11.814V18H32.0963V11.814H33.7523ZM33.9503 10.056C33.9503 10.196 33.9223 10.326 33.8663 10.446C33.8103 10.566 33.7343 10.672 33.6383 10.764C33.5463 10.856 33.4363 10.928 33.3083 10.98C33.1843 11.032 33.0503 11.058 32.9063 11.058C32.7703 11.058 32.6403 11.032 32.5163 10.98C32.3963 10.928 32.2903 10.856 32.1983 10.764C32.1063 10.672 32.0323 10.566 31.9763 10.446C31.9243 10.326 31.8983 10.196 31.8983 10.056C31.8983 9.916 31.9243 9.786 31.9763 9.666C32.0323 9.542 32.1063 9.434 32.1983 9.342C32.2903 9.25 32.3963 9.178 32.5163 9.126C32.6403 9.074 32.7703 9.048 32.9063 9.048C33.0503 9.048 33.1843 9.074 33.3083 9.126C33.4363 9.178 33.5463 9.25 33.6383 9.342C33.7343 9.434 33.8103 9.542 33.8663 9.666C33.9223 9.786 33.9503 9.916 33.9503 10.056ZM37.4695 14.676C37.8095 14.676 38.0595 14.59 38.2195 14.418C38.3835 14.246 38.4655 14.024 38.4655 13.752C38.4655 13.468 38.3835 13.246 38.2195 13.086C38.0595 12.922 37.8095 12.84 37.4695 12.84C37.1295 12.84 36.8795 12.922 36.7195 13.086C36.5595 13.246 36.4795 13.468 36.4795 13.752C36.4795 14.02 36.5595 14.242 36.7195 14.418C36.8835 14.59 37.1335 14.676 37.4695 14.676ZM39.0355 18.252C39.0355 18.144 39.0015 18.056 38.9335 17.988C38.8655 17.92 38.7735 17.866 38.6575 17.826C38.5455 17.786 38.4115 17.758 38.2555 17.742C38.0995 17.722 37.9335 17.708 37.7575 17.7C37.5815 17.688 37.3995 17.678 37.2115 17.67C37.0235 17.662 36.8395 17.648 36.6595 17.628C36.5195 17.712 36.4035 17.812 36.3115 17.928C36.2235 18.04 36.1795 18.168 36.1795 18.312C36.1795 18.412 36.2015 18.504 36.2455 18.588C36.2935 18.672 36.3715 18.744 36.4795 18.804C36.5875 18.864 36.7295 18.91 36.9055 18.942C37.0815 18.978 37.3015 18.996 37.5655 18.996C37.8375 18.996 38.0675 18.978 38.2555 18.942C38.4435 18.906 38.5955 18.854 38.7115 18.786C38.8275 18.722 38.9095 18.644 38.9575 18.552C39.0095 18.46 39.0355 18.36 39.0355 18.252ZM40.6795 12.018V12.624C40.6795 12.72 40.6515 12.796 40.5955 12.852C40.5435 12.908 40.4555 12.95 40.3315 12.978L39.8275 13.08C39.8955 13.276 39.9295 13.486 39.9295 13.71C39.9295 14.018 39.8655 14.296 39.7375 14.544C39.6135 14.788 39.4415 14.998 39.2215 15.174C39.0015 15.346 38.7415 15.48 38.4415 15.576C38.1415 15.668 37.8175 15.714 37.4695 15.714C37.2495 15.714 37.0435 15.696 36.8515 15.66C36.6835 15.764 36.5995 15.878 36.5995 16.002C36.5995 16.118 36.6555 16.202 36.7675 16.254C36.8835 16.306 37.0335 16.344 37.2175 16.368C37.4055 16.388 37.6175 16.402 37.8535 16.41C38.0935 16.414 38.3355 16.426 38.5795 16.446C38.8275 16.466 39.0695 16.502 39.3055 16.554C39.5455 16.602 39.7575 16.684 39.9415 16.8C40.1295 16.912 40.2795 17.062 40.3915 17.25C40.5075 17.438 40.5655 17.68 40.5655 17.976C40.5655 18.252 40.4975 18.52 40.3615 18.78C40.2255 19.04 40.0275 19.272 39.7675 19.476C39.5115 19.68 39.1955 19.844 38.8195 19.968C38.4435 20.092 38.0155 20.154 37.5355 20.154C37.0595 20.154 36.6455 20.108 36.2935 20.016C35.9455 19.928 35.6555 19.808 35.4235 19.656C35.1955 19.508 35.0255 19.336 34.9135 19.14C34.8015 18.944 34.7455 18.74 34.7455 18.528C34.7455 18.252 34.8295 18.018 34.9975 17.826C35.1655 17.634 35.3975 17.48 35.6935 17.364C35.5375 17.276 35.4115 17.162 35.3155 17.022C35.2235 16.878 35.1775 16.692 35.1775 16.464C35.1775 16.28 35.2435 16.086 35.3755 15.882C35.5115 15.678 35.7195 15.508 35.9995 15.372C35.6835 15.204 35.4335 14.98 35.2495 14.7C35.0655 14.416 34.9735 14.086 34.9735 13.71C34.9735 13.402 35.0355 13.124 35.1595 12.876C35.2875 12.628 35.4635 12.418 35.6875 12.246C35.9115 12.07 36.1755 11.936 36.4795 11.844C36.7835 11.752 37.1135 11.706 37.4695 11.706C37.9975 11.706 38.4635 11.81 38.8675 12.018H40.6795ZM43.1965 12.42C43.3125 12.316 43.4325 12.222 43.5565 12.138C43.6845 12.05 43.8185 11.976 43.9585 11.916C44.1025 11.852 44.2545 11.804 44.4145 11.772C44.5785 11.736 44.7545 11.718 44.9425 11.718C45.2785 11.718 45.5765 11.776 45.8365 11.892C46.0965 12.008 46.3145 12.17 46.4905 12.378C46.6705 12.586 46.8045 12.834 46.8925 13.122C46.9845 13.41 47.0305 13.726 47.0305 14.07V18H45.3805V14.07C45.3805 13.726 45.3005 13.46 45.1405 13.272C44.9805 13.08 44.7445 12.984 44.4325 12.984C44.2005 12.984 43.9825 13.034 43.7785 13.134C43.5745 13.234 43.3805 13.374 43.1965 13.554V18H41.5405V9.054H43.1965V12.42ZM56.1407 10.962C56.0847 11.054 56.0267 11.122 55.9667 11.166C55.9107 11.206 55.8367 11.226 55.7447 11.226C55.6567 11.226 55.5607 11.196 55.4567 11.136C55.3567 11.072 55.2387 11.004 55.1027 10.932C54.9667 10.86 54.8107 10.794 54.6347 10.734C54.4587 10.67 54.2527 10.638 54.0167 10.638C53.6007 10.638 53.2887 10.732 53.0807 10.92C52.8727 11.104 52.7687 11.346 52.7687 11.646C52.7687 11.838 52.8247 11.998 52.9367 12.126C53.0527 12.25 53.2027 12.358 53.3867 12.45C53.5747 12.542 53.7867 12.624 54.0227 12.696C54.2587 12.768 54.5007 12.848 54.7487 12.936C54.9967 13.02 55.2387 13.12 55.4747 13.236C55.7107 13.352 55.9207 13.498 56.1047 13.674C56.2927 13.85 56.4427 14.066 56.5547 14.322C56.6707 14.574 56.7287 14.882 56.7287 15.246C56.7287 15.642 56.6587 16.014 56.5187 16.362C56.3827 16.706 56.1847 17.008 55.9247 17.268C55.6647 17.524 55.3427 17.726 54.9587 17.874C54.5787 18.022 54.1467 18.096 53.6627 18.096C53.3867 18.096 53.1107 18.068 52.8347 18.012C52.5627 17.956 52.2987 17.878 52.0427 17.778C51.7907 17.678 51.5527 17.558 51.3287 17.418C51.1047 17.278 50.9087 17.122 50.7407 16.95L51.2687 16.098C51.3127 16.034 51.3707 15.982 51.4427 15.942C51.5147 15.898 51.5907 15.876 51.6707 15.876C51.7787 15.876 51.8927 15.916 52.0127 15.996C52.1327 16.076 52.2707 16.164 52.4267 16.26C52.5827 16.356 52.7627 16.444 52.9667 16.524C53.1747 16.604 53.4227 16.644 53.7107 16.644C54.1307 16.644 54.4547 16.548 54.6827 16.356C54.9147 16.164 55.0307 15.878 55.0307 15.498C55.0307 15.278 54.9727 15.1 54.8567 14.964C54.7447 14.828 54.5967 14.714 54.4127 14.622C54.2287 14.53 54.0187 14.452 53.7827 14.388C53.5467 14.32 53.3047 14.246 53.0567 14.166C52.8087 14.086 52.5667 13.99 52.3307 13.878C52.0947 13.766 51.8847 13.618 51.7007 13.434C51.5167 13.25 51.3667 13.022 51.2507 12.75C51.1387 12.478 51.0827 12.14 51.0827 11.736C51.0827 11.412 51.1467 11.098 51.2747 10.794C51.4027 10.49 51.5907 10.22 51.8387 9.984C52.0867 9.748 52.3907 9.558 52.7507 9.414C53.1147 9.27 53.5307 9.198 53.9987 9.198C54.5227 9.198 55.0067 9.28 55.4507 9.444C55.8987 9.604 56.2767 9.828 56.5847 10.116L56.1407 10.962ZM60.9581 15.414C60.5541 15.434 60.2181 15.47 59.9501 15.522C59.6821 15.57 59.4681 15.634 59.3081 15.714C59.1521 15.794 59.0401 15.886 58.9721 15.99C58.9081 16.09 58.8761 16.2 58.8761 16.32C58.8761 16.56 58.9421 16.73 59.0741 16.83C59.2101 16.93 59.3981 16.98 59.6381 16.98C59.9141 16.98 60.1521 16.932 60.3521 16.836C60.5561 16.736 60.7581 16.582 60.9581 16.374V15.414ZM57.5861 12.672C57.9501 12.344 58.3521 12.1 58.7921 11.94C59.2321 11.776 59.7081 11.694 60.2201 11.694C60.5881 11.694 60.9161 11.754 61.2041 11.874C61.4961 11.994 61.7421 12.162 61.9421 12.378C62.1461 12.59 62.3021 12.844 62.4101 13.14C62.5181 13.436 62.5721 13.76 62.5721 14.112V18H61.8161C61.6601 18 61.5401 17.978 61.4561 17.934C61.3761 17.89 61.3101 17.798 61.2581 17.658L61.1261 17.262C60.9701 17.398 60.8181 17.518 60.6701 17.622C60.5261 17.726 60.3761 17.814 60.2201 17.886C60.0641 17.954 59.8961 18.006 59.7161 18.042C59.5401 18.078 59.3421 18.096 59.1221 18.096C58.8501 18.096 58.6021 18.06 58.3781 17.988C58.1541 17.916 57.9601 17.81 57.7961 17.67C57.6361 17.526 57.5121 17.348 57.4241 17.136C57.3361 16.924 57.2921 16.68 57.2921 16.404C57.2921 16.176 57.3501 15.948 57.4661 15.72C57.5821 15.492 57.7801 15.286 58.0601 15.102C58.3441 14.914 58.7201 14.76 59.1881 14.64C59.6601 14.516 60.2501 14.446 60.9581 14.43V14.112C60.9581 13.724 60.8761 13.44 60.7121 13.26C60.5481 13.076 60.3121 12.984 60.0041 12.984C59.7761 12.984 59.5861 13.012 59.4341 13.068C59.2821 13.12 59.1481 13.178 59.0321 13.242C58.9201 13.302 58.8141 13.36 58.7141 13.416C58.6141 13.468 58.4981 13.494 58.3661 13.494C58.2501 13.494 58.1521 13.466 58.0721 13.41C57.9961 13.35 57.9321 13.28 57.8801 13.2L57.5861 12.672ZM65.5327 9.054V18H63.8767V9.054H65.5327ZM70.1456 15.414C69.7416 15.434 69.4056 15.47 69.1376 15.522C68.8696 15.57 68.6556 15.634 68.4956 15.714C68.3396 15.794 68.2276 15.886 68.1596 15.99C68.0956 16.09 68.0636 16.2 68.0636 16.32C68.0636 16.56 68.1296 16.73 68.2616 16.83C68.3976 16.93 68.5856 16.98 68.8256 16.98C69.1016 16.98 69.3396 16.932 69.5396 16.836C69.7436 16.736 69.9456 16.582 70.1456 16.374V15.414ZM66.7736 12.672C67.1376 12.344 67.5396 12.1 67.9796 11.94C68.4196 11.776 68.8956 11.694 69.4076 11.694C69.7756 11.694 70.1036 11.754 70.3916 11.874C70.6836 11.994 70.9296 12.162 71.1296 12.378C71.3336 12.59 71.4896 12.844 71.5976 13.14C71.7056 13.436 71.7596 13.76 71.7596 14.112V18H71.0036C70.8476 18 70.7276 17.978 70.6436 17.934C70.5636 17.89 70.4976 17.798 70.4456 17.658L70.3136 17.262C70.1576 17.398 70.0056 17.518 69.8576 17.622C69.7136 17.726 69.5636 17.814 69.4076 17.886C69.2516 17.954 69.0836 18.006 68.9036 18.042C68.7276 18.078 68.5296 18.096 68.3096 18.096C68.0376 18.096 67.7896 18.06 67.5656 17.988C67.3416 17.916 67.1476 17.81 66.9836 17.67C66.8236 17.526 66.6996 17.348 66.6116 17.136C66.5236 16.924 66.4796 16.68 66.4796 16.404C66.4796 16.176 66.5376 15.948 66.6536 15.72C66.7696 15.492 66.9676 15.286 67.2476 15.102C67.5316 14.914 67.9076 14.76 68.3756 14.64C68.8476 14.516 69.4376 14.446 70.1456 14.43V14.112C70.1456 13.724 70.0636 13.44 69.8996 13.26C69.7356 13.076 69.4996 12.984 69.1916 12.984C68.9636 12.984 68.7736 13.012 68.6216 13.068C68.4696 13.12 68.3356 13.178 68.2196 13.242C68.1076 13.302 68.0016 13.36 67.9016 13.416C67.8016 13.468 67.6856 13.494 67.5536 13.494C67.4376 13.494 67.3396 13.466 67.2596 13.41C67.1836 13.35 67.1196 13.28 67.0676 13.2L66.7736 12.672ZM74.6062 12.834C74.8022 12.482 75.0282 12.204 75.2842 12C75.5402 11.796 75.8402 11.694 76.1842 11.694C76.4642 11.694 76.6922 11.76 76.8682 11.892L76.7602 13.116C76.7402 13.196 76.7082 13.252 76.6642 13.284C76.6242 13.312 76.5682 13.326 76.4962 13.326C76.4322 13.326 76.3402 13.318 76.2202 13.302C76.1002 13.282 75.9882 13.272 75.8842 13.272C75.7322 13.272 75.5962 13.294 75.4762 13.338C75.3602 13.382 75.2562 13.444 75.1642 13.524C75.0722 13.604 74.9882 13.702 74.9122 13.818C74.8402 13.934 74.7722 14.066 74.7082 14.214V18H73.0522V11.814H74.0302C74.1982 11.814 74.3142 11.844 74.3782 11.904C74.4422 11.964 74.4882 12.068 74.5162 12.216L74.6062 12.834ZM83.3116 11.814L79.9756 19.662C79.9236 19.774 79.8596 19.858 79.7836 19.914C79.7116 19.97 79.5956 19.998 79.4356 19.998H78.2056L79.3756 17.502L76.8916 11.814H78.3436C78.4756 11.814 78.5776 11.844 78.6496 11.904C78.7216 11.964 78.7736 12.034 78.8056 12.114L79.9816 15.072C80.0256 15.188 80.0636 15.306 80.0956 15.426C80.1316 15.542 80.1656 15.658 80.1976 15.774C80.2696 15.538 80.3516 15.302 80.4436 15.066L81.5356 12.114C81.5676 12.026 81.6256 11.954 81.7096 11.898C81.7936 11.842 81.8856 11.814 81.9856 11.814H83.3116Z"
                                    fill="white"/>
                                <path
                                    d="M14.6416 15.3613C14.6416 15.0013 14.5527 14.7188 14.375 14.5137C14.1973 14.3086 13.8851 14.1149 13.4385 13.9326C12.9919 13.7503 12.5794 13.5658 12.2012 13.3789C11.8229 13.1921 11.4971 12.9756 11.2236 12.7295C10.9502 12.4834 10.7406 12.1986 10.5947 11.875C10.4489 11.5514 10.376 11.1595 10.376 10.6992C10.376 9.92904 10.6357 9.29557 11.1553 8.79883C11.6748 8.29753 12.3675 8.00586 13.2334 7.92383V6.48145H14.3203V7.95117C15.1543 8.07422 15.8083 8.41829 16.2822 8.9834C16.7607 9.54395 17 10.2572 17 11.123H14.6895C14.6895 10.6491 14.5983 10.2845 14.416 10.0293C14.2337 9.77409 13.974 9.64648 13.6367 9.64648C13.3359 9.64648 13.1012 9.74219 12.9326 9.93359C12.7686 10.1204 12.6865 10.3802 12.6865 10.7129C12.6865 11.0501 12.7822 11.319 12.9736 11.5195C13.165 11.7155 13.4727 11.9046 13.8965 12.0869C14.3203 12.2646 14.7191 12.4515 15.0928 12.6475C15.471 12.8389 15.7969 13.0576 16.0703 13.3037C16.3438 13.5498 16.5579 13.8369 16.7129 14.165C16.8678 14.4932 16.9453 14.8874 16.9453 15.3477C16.9453 16.127 16.6969 16.7627 16.2002 17.2549C15.708 17.7471 15.0358 18.0342 14.1836 18.1162V19.4902H13.0967V18.1094C12.1032 18.0046 11.3398 17.665 10.8066 17.0908C10.278 16.512 10.0137 15.751 10.0137 14.8076H12.3174C12.3174 15.3271 12.4313 15.7236 12.6592 15.9971C12.8916 16.266 13.2197 16.4004 13.6436 16.4004C13.9535 16.4004 14.1973 16.3092 14.375 16.127C14.5527 15.9401 14.6416 15.6849 14.6416 15.3613Z"
                                    fill="white"/>
                                <defs>
                                    <linearGradient id="paint2_linear" x1="0" y1="0" x2="94" y2="26"
                                                    gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#00FF66"/>
                                        <stop offset="1" stop-color="#00FFE0"/>
                                    </linearGradient>
                                </defs>
                            </svg>

                        </div>
                    );
                    break;
                case "immediateStart":
                    element = (<div className={styles.JobDecorationLabelTopLeft}>
                        <svg width="118" height="26" viewBox="0 0 118 26" fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <rect width="118" height="26" rx="5" fill="url(#paint1_linear)"/>
                            <path
                                d="M26.1869 18H24.3749V9.294H26.1869V18ZM27.686 18V11.814H28.706C28.914 11.814 29.052 11.91 29.12 12.102L29.216 12.504C29.324 12.392 29.434 12.288 29.546 12.192C29.662 12.096 29.786 12.014 29.918 11.946C30.05 11.874 30.192 11.818 30.344 11.778C30.5 11.738 30.668 11.718 30.848 11.718C31.228 11.718 31.542 11.82 31.79 12.024C32.038 12.224 32.226 12.492 32.354 12.828C32.454 12.632 32.576 12.464 32.72 12.324C32.868 12.18 33.028 12.064 33.2 11.976C33.376 11.888 33.56 11.824 33.752 11.784C33.948 11.74 34.144 11.718 34.34 11.718C34.688 11.718 34.996 11.77 35.264 11.874C35.532 11.978 35.756 12.132 35.936 12.336C36.12 12.536 36.26 12.782 36.356 13.074C36.452 13.366 36.5 13.698 36.5 14.07V18H34.844V14.07C34.844 13.346 34.534 12.984 33.914 12.984C33.774 12.984 33.644 13.008 33.524 13.056C33.408 13.1 33.304 13.168 33.212 13.26C33.124 13.352 33.054 13.466 33.002 13.602C32.954 13.738 32.93 13.894 32.93 14.07V18H31.274V14.07C31.274 13.678 31.196 13.4 31.04 13.236C30.888 13.068 30.662 12.984 30.362 12.984C30.17 12.984 29.988 13.03 29.816 13.122C29.648 13.21 29.49 13.334 29.342 13.494V18H27.686ZM37.811 18V11.814H38.831C39.039 11.814 39.177 11.91 39.245 12.102L39.341 12.504C39.449 12.392 39.559 12.288 39.671 12.192C39.787 12.096 39.911 12.014 40.043 11.946C40.175 11.874 40.317 11.818 40.469 11.778C40.625 11.738 40.793 11.718 40.973 11.718C41.353 11.718 41.667 11.82 41.915 12.024C42.163 12.224 42.351 12.492 42.479 12.828C42.579 12.632 42.701 12.464 42.845 12.324C42.993 12.18 43.153 12.064 43.325 11.976C43.501 11.888 43.685 11.824 43.877 11.784C44.073 11.74 44.269 11.718 44.465 11.718C44.813 11.718 45.121 11.77 45.389 11.874C45.657 11.978 45.881 12.132 46.061 12.336C46.245 12.536 46.385 12.782 46.481 13.074C46.577 13.366 46.625 13.698 46.625 14.07V18H44.969V14.07C44.969 13.346 44.659 12.984 44.039 12.984C43.899 12.984 43.769 13.008 43.649 13.056C43.533 13.1 43.429 13.168 43.337 13.26C43.249 13.352 43.179 13.466 43.127 13.602C43.079 13.738 43.055 13.894 43.055 14.07V18H41.399V14.07C41.399 13.678 41.321 13.4 41.165 13.236C41.013 13.068 40.787 12.984 40.487 12.984C40.295 12.984 40.113 13.03 39.941 13.122C39.773 13.21 39.615 13.334 39.467 13.494V18H37.811ZM51.86 14.178C51.86 14.006 51.836 13.842 51.788 13.686C51.744 13.53 51.672 13.392 51.572 13.272C51.472 13.152 51.346 13.058 51.194 12.99C51.042 12.918 50.86 12.882 50.648 12.882C50.252 12.882 49.942 12.994 49.718 13.218C49.494 13.442 49.348 13.762 49.28 14.178H51.86ZM49.256 15.162C49.308 15.742 49.472 16.166 49.748 16.434C50.028 16.702 50.392 16.836 50.84 16.836C51.068 16.836 51.264 16.81 51.428 16.758C51.596 16.702 51.742 16.642 51.866 16.578C51.994 16.51 52.108 16.45 52.208 16.398C52.312 16.342 52.414 16.314 52.514 16.314C52.642 16.314 52.742 16.362 52.814 16.458L53.294 17.058C53.118 17.262 52.924 17.432 52.712 17.568C52.5 17.7 52.28 17.806 52.052 17.886C51.824 17.962 51.594 18.014 51.362 18.042C51.13 18.074 50.906 18.09 50.69 18.09C50.258 18.09 49.854 18.02 49.478 17.88C49.106 17.736 48.78 17.526 48.5 17.25C48.224 16.97 48.006 16.624 47.846 16.212C47.686 15.8 47.606 15.322 47.606 14.778C47.606 14.358 47.674 13.962 47.81 13.59C47.95 13.218 48.15 12.894 48.41 12.618C48.67 12.342 48.986 12.124 49.358 11.964C49.73 11.8 50.15 11.718 50.618 11.718C51.014 11.718 51.378 11.782 51.71 11.91C52.046 12.034 52.334 12.216 52.574 12.456C52.818 12.696 53.006 12.992 53.138 13.344C53.274 13.692 53.342 14.09 53.342 14.538C53.342 14.662 53.336 14.764 53.324 14.844C53.312 14.924 53.292 14.988 53.264 15.036C53.236 15.084 53.198 15.118 53.15 15.138C53.102 15.154 53.04 15.162 52.964 15.162H49.256ZM58.1915 13.422C58.0355 13.242 57.8655 13.116 57.6815 13.044C57.5015 12.972 57.3095 12.936 57.1055 12.936C56.9055 12.936 56.7235 12.974 56.5595 13.05C56.3955 13.126 56.2535 13.246 56.1335 13.41C56.0175 13.57 55.9275 13.776 55.8635 14.028C55.7995 14.28 55.7675 14.58 55.7675 14.928C55.7675 15.272 55.7935 15.564 55.8455 15.804C55.8975 16.044 55.9715 16.238 56.0675 16.386C56.1675 16.534 56.2875 16.642 56.4275 16.71C56.5675 16.774 56.7235 16.806 56.8955 16.806C57.1875 16.806 57.4315 16.748 57.6275 16.632C57.8275 16.516 58.0155 16.352 58.1915 16.14V13.422ZM59.8475 9.054V18H58.8275C58.6155 18 58.4795 17.904 58.4195 17.712L58.2815 17.172C58.1575 17.308 58.0255 17.432 57.8855 17.544C57.7495 17.656 57.6015 17.754 57.4415 17.838C57.2815 17.918 57.1095 17.98 56.9255 18.024C56.7415 18.068 56.5415 18.09 56.3255 18.09C55.9935 18.09 55.6895 18.02 55.4135 17.88C55.1375 17.74 54.8975 17.536 54.6935 17.268C54.4935 16.996 54.3375 16.664 54.2255 16.272C54.1135 15.88 54.0575 15.432 54.0575 14.928C54.0575 14.468 54.1195 14.04 54.2435 13.644C54.3715 13.248 54.5515 12.906 54.7835 12.618C55.0155 12.33 55.2955 12.104 55.6235 11.94C55.9515 11.776 56.3155 11.694 56.7155 11.694C57.0515 11.694 57.3335 11.744 57.5615 11.844C57.7935 11.944 58.0035 12.08 58.1915 12.252V9.054H59.8475ZM62.929 11.814V18H61.273V11.814H62.929ZM63.127 10.056C63.127 10.196 63.099 10.326 63.043 10.446C62.987 10.566 62.911 10.672 62.815 10.764C62.723 10.856 62.613 10.928 62.485 10.98C62.361 11.032 62.227 11.058 62.083 11.058C61.947 11.058 61.817 11.032 61.693 10.98C61.573 10.928 61.467 10.856 61.375 10.764C61.283 10.672 61.209 10.566 61.153 10.446C61.101 10.326 61.075 10.196 61.075 10.056C61.075 9.916 61.101 9.786 61.153 9.666C61.209 9.542 61.283 9.434 61.375 9.342C61.467 9.25 61.573 9.178 61.693 9.126C61.817 9.074 61.947 9.048 62.083 9.048C62.227 9.048 62.361 9.074 62.485 9.126C62.613 9.178 62.723 9.25 62.815 9.342C62.911 9.434 62.987 9.542 63.043 9.666C63.099 9.786 63.127 9.916 63.127 10.056ZM67.5762 15.414C67.1722 15.434 66.8362 15.47 66.5682 15.522C66.3002 15.57 66.0862 15.634 65.9262 15.714C65.7702 15.794 65.6582 15.886 65.5902 15.99C65.5262 16.09 65.4942 16.2 65.4942 16.32C65.4942 16.56 65.5602 16.73 65.6922 16.83C65.8282 16.93 66.0162 16.98 66.2562 16.98C66.5322 16.98 66.7702 16.932 66.9702 16.836C67.1742 16.736 67.3762 16.582 67.5762 16.374V15.414ZM64.2042 12.672C64.5682 12.344 64.9702 12.1 65.4102 11.94C65.8502 11.776 66.3262 11.694 66.8382 11.694C67.2062 11.694 67.5342 11.754 67.8222 11.874C68.1142 11.994 68.3602 12.162 68.5602 12.378C68.7642 12.59 68.9202 12.844 69.0282 13.14C69.1362 13.436 69.1902 13.76 69.1902 14.112V18H68.4342C68.2782 18 68.1582 17.978 68.0742 17.934C67.9942 17.89 67.9282 17.798 67.8762 17.658L67.7442 17.262C67.5882 17.398 67.4362 17.518 67.2882 17.622C67.1442 17.726 66.9942 17.814 66.8382 17.886C66.6822 17.954 66.5142 18.006 66.3342 18.042C66.1582 18.078 65.9602 18.096 65.7402 18.096C65.4682 18.096 65.2202 18.06 64.9962 17.988C64.7722 17.916 64.5782 17.81 64.4142 17.67C64.2542 17.526 64.1302 17.348 64.0422 17.136C63.9542 16.924 63.9102 16.68 63.9102 16.404C63.9102 16.176 63.9682 15.948 64.0842 15.72C64.2002 15.492 64.3982 15.286 64.6782 15.102C64.9622 14.914 65.3382 14.76 65.8062 14.64C66.2782 14.516 66.8682 14.446 67.5762 14.43V14.112C67.5762 13.724 67.4942 13.44 67.3302 13.26C67.1662 13.076 66.9302 12.984 66.6222 12.984C66.3942 12.984 66.2042 13.012 66.0522 13.068C65.9002 13.12 65.7662 13.178 65.6502 13.242C65.5382 13.302 65.4322 13.36 65.3322 13.416C65.2322 13.468 65.1162 13.494 64.9842 13.494C64.8682 13.494 64.7702 13.466 64.6902 13.41C64.6142 13.35 64.5502 13.28 64.4982 13.2L64.2042 12.672ZM72.5251 18.096C72.2451 18.096 71.9971 18.056 71.7811 17.976C71.5651 17.892 71.3831 17.774 71.2351 17.622C71.0871 17.47 70.9751 17.286 70.8991 17.07C70.8231 16.854 70.7851 16.61 70.7851 16.338V13.002H70.2031C70.1151 13.002 70.0391 12.974 69.9751 12.918C69.9151 12.862 69.8851 12.778 69.8851 12.666V12.018L70.8751 11.838L71.2111 10.236C71.2551 10.056 71.3771 9.966 71.5771 9.966H72.4411V11.85H74.0371V13.002H72.4411V16.23C72.4411 16.402 72.4811 16.538 72.5611 16.638C72.6451 16.738 72.7631 16.788 72.9151 16.788C72.9951 16.788 73.0631 16.78 73.1191 16.764C73.1751 16.744 73.2231 16.724 73.2631 16.704C73.3031 16.68 73.3391 16.66 73.3711 16.644C73.4071 16.624 73.4431 16.614 73.4791 16.614C73.5271 16.614 73.5671 16.626 73.5991 16.65C73.6311 16.67 73.6631 16.706 73.6951 16.758L74.1931 17.55C73.9651 17.73 73.7071 17.866 73.4191 17.958C73.1311 18.05 72.8331 18.096 72.5251 18.096ZM78.7896 14.178C78.7896 14.006 78.7656 13.842 78.7176 13.686C78.6736 13.53 78.6016 13.392 78.5016 13.272C78.4016 13.152 78.2756 13.058 78.1236 12.99C77.9716 12.918 77.7896 12.882 77.5776 12.882C77.1816 12.882 76.8716 12.994 76.6476 13.218C76.4236 13.442 76.2776 13.762 76.2096 14.178H78.7896ZM76.1856 15.162C76.2376 15.742 76.4016 16.166 76.6776 16.434C76.9576 16.702 77.3216 16.836 77.7696 16.836C77.9976 16.836 78.1936 16.81 78.3576 16.758C78.5256 16.702 78.6716 16.642 78.7956 16.578C78.9236 16.51 79.0376 16.45 79.1376 16.398C79.2416 16.342 79.3436 16.314 79.4436 16.314C79.5716 16.314 79.6716 16.362 79.7436 16.458L80.2236 17.058C80.0476 17.262 79.8536 17.432 79.6416 17.568C79.4296 17.7 79.2096 17.806 78.9816 17.886C78.7536 17.962 78.5236 18.014 78.2916 18.042C78.0596 18.074 77.8356 18.09 77.6196 18.09C77.1876 18.09 76.7836 18.02 76.4076 17.88C76.0356 17.736 75.7096 17.526 75.4296 17.25C75.1536 16.97 74.9356 16.624 74.7756 16.212C74.6156 15.8 74.5356 15.322 74.5356 14.778C74.5356 14.358 74.6036 13.962 74.7396 13.59C74.8796 13.218 75.0796 12.894 75.3396 12.618C75.5996 12.342 75.9156 12.124 76.2876 11.964C76.6596 11.8 77.0796 11.718 77.5476 11.718C77.9436 11.718 78.3076 11.782 78.6396 11.91C78.9756 12.034 79.2636 12.216 79.5036 12.456C79.7476 12.696 79.9356 12.992 80.0676 13.344C80.2036 13.692 80.2716 14.09 80.2716 14.538C80.2716 14.662 80.2656 14.764 80.2536 14.844C80.2416 14.924 80.2216 14.988 80.1936 15.036C80.1656 15.084 80.1276 15.118 80.0796 15.138C80.0316 15.154 79.9696 15.162 79.8936 15.162H76.1856ZM89.0909 10.962C89.0349 11.054 88.9769 11.122 88.9169 11.166C88.8609 11.206 88.7869 11.226 88.6949 11.226C88.6069 11.226 88.5109 11.196 88.4069 11.136C88.3069 11.072 88.1889 11.004 88.0529 10.932C87.9169 10.86 87.7609 10.794 87.5849 10.734C87.4089 10.67 87.2029 10.638 86.9669 10.638C86.5509 10.638 86.2389 10.732 86.0309 10.92C85.8229 11.104 85.7189 11.346 85.7189 11.646C85.7189 11.838 85.7749 11.998 85.8869 12.126C86.0029 12.25 86.1529 12.358 86.3369 12.45C86.5249 12.542 86.7369 12.624 86.9729 12.696C87.2089 12.768 87.4509 12.848 87.6989 12.936C87.9469 13.02 88.1889 13.12 88.4249 13.236C88.6609 13.352 88.8709 13.498 89.0549 13.674C89.2429 13.85 89.3929 14.066 89.5049 14.322C89.6209 14.574 89.6789 14.882 89.6789 15.246C89.6789 15.642 89.6089 16.014 89.4689 16.362C89.3329 16.706 89.1349 17.008 88.8749 17.268C88.6149 17.524 88.2929 17.726 87.9089 17.874C87.5289 18.022 87.0969 18.096 86.6129 18.096C86.3369 18.096 86.0609 18.068 85.7849 18.012C85.5129 17.956 85.2489 17.878 84.9929 17.778C84.7409 17.678 84.5029 17.558 84.2789 17.418C84.0549 17.278 83.8589 17.122 83.6909 16.95L84.2189 16.098C84.2629 16.034 84.3209 15.982 84.3929 15.942C84.4649 15.898 84.5409 15.876 84.6209 15.876C84.7289 15.876 84.8429 15.916 84.9629 15.996C85.0829 16.076 85.2209 16.164 85.3769 16.26C85.5329 16.356 85.7129 16.444 85.9169 16.524C86.1249 16.604 86.3729 16.644 86.6609 16.644C87.0809 16.644 87.4049 16.548 87.6329 16.356C87.8649 16.164 87.9809 15.878 87.9809 15.498C87.9809 15.278 87.9229 15.1 87.8069 14.964C87.6949 14.828 87.5469 14.714 87.3629 14.622C87.1789 14.53 86.9689 14.452 86.7329 14.388C86.4969 14.32 86.2549 14.246 86.0069 14.166C85.7589 14.086 85.5169 13.99 85.2809 13.878C85.0449 13.766 84.8349 13.618 84.6509 13.434C84.4669 13.25 84.3169 13.022 84.2009 12.75C84.0889 12.478 84.0329 12.14 84.0329 11.736C84.0329 11.412 84.0969 11.098 84.2249 10.794C84.3529 10.49 84.5409 10.22 84.7889 9.984C85.0369 9.748 85.3409 9.558 85.7009 9.414C86.0649 9.27 86.4809 9.198 86.9489 9.198C87.4729 9.198 87.9569 9.28 88.4009 9.444C88.8489 9.604 89.2269 9.828 89.5349 10.116L89.0909 10.962ZM92.6227 18.096C92.3427 18.096 92.0947 18.056 91.8787 17.976C91.6627 17.892 91.4807 17.774 91.3327 17.622C91.1847 17.47 91.0727 17.286 90.9967 17.07C90.9207 16.854 90.8827 16.61 90.8827 16.338V13.002H90.3007C90.2127 13.002 90.1367 12.974 90.0727 12.918C90.0127 12.862 89.9827 12.778 89.9827 12.666V12.018L90.9727 11.838L91.3087 10.236C91.3527 10.056 91.4747 9.966 91.6747 9.966H92.5387V11.85H94.1347V13.002H92.5387V16.23C92.5387 16.402 92.5787 16.538 92.6587 16.638C92.7427 16.738 92.8607 16.788 93.0127 16.788C93.0927 16.788 93.1607 16.78 93.2167 16.764C93.2727 16.744 93.3207 16.724 93.3607 16.704C93.4007 16.68 93.4367 16.66 93.4687 16.644C93.5047 16.624 93.5407 16.614 93.5767 16.614C93.6247 16.614 93.6647 16.626 93.6967 16.65C93.7287 16.67 93.7607 16.706 93.7927 16.758L94.2907 17.55C94.0627 17.73 93.8047 17.866 93.5167 17.958C93.2287 18.05 92.9307 18.096 92.6227 18.096ZM98.2559 15.414C97.8519 15.434 97.5159 15.47 97.2479 15.522C96.9799 15.57 96.7659 15.634 96.6059 15.714C96.4499 15.794 96.3379 15.886 96.2699 15.99C96.2059 16.09 96.1739 16.2 96.1739 16.32C96.1739 16.56 96.2399 16.73 96.3719 16.83C96.5079 16.93 96.6959 16.98 96.9359 16.98C97.2119 16.98 97.4499 16.932 97.6499 16.836C97.8539 16.736 98.0559 16.582 98.2559 16.374V15.414ZM94.8839 12.672C95.2479 12.344 95.6499 12.1 96.0899 11.94C96.5299 11.776 97.0059 11.694 97.5179 11.694C97.8859 11.694 98.2139 11.754 98.5019 11.874C98.7939 11.994 99.0399 12.162 99.2399 12.378C99.4439 12.59 99.5999 12.844 99.7079 13.14C99.8159 13.436 99.8699 13.76 99.8699 14.112V18H99.1139C98.9579 18 98.8379 17.978 98.7539 17.934C98.6739 17.89 98.6079 17.798 98.5559 17.658L98.4239 17.262C98.2679 17.398 98.1159 17.518 97.9679 17.622C97.8239 17.726 97.6739 17.814 97.5179 17.886C97.3619 17.954 97.1939 18.006 97.0139 18.042C96.8379 18.078 96.6399 18.096 96.4199 18.096C96.1479 18.096 95.8999 18.06 95.6759 17.988C95.4519 17.916 95.2579 17.81 95.0939 17.67C94.9339 17.526 94.8099 17.348 94.7219 17.136C94.6339 16.924 94.5899 16.68 94.5899 16.404C94.5899 16.176 94.6479 15.948 94.7639 15.72C94.8799 15.492 95.0779 15.286 95.3579 15.102C95.6419 14.914 96.0179 14.76 96.4859 14.64C96.9579 14.516 97.5479 14.446 98.2559 14.43V14.112C98.2559 13.724 98.1739 13.44 98.0099 13.26C97.8459 13.076 97.6099 12.984 97.3019 12.984C97.0739 12.984 96.8839 13.012 96.7319 13.068C96.5799 13.12 96.4459 13.178 96.3299 13.242C96.2179 13.302 96.1119 13.36 96.0119 13.416C95.9119 13.468 95.7959 13.494 95.6639 13.494C95.5479 13.494 95.4499 13.466 95.3699 13.41C95.2939 13.35 95.2299 13.28 95.1779 13.2L94.8839 12.672ZM102.717 12.834C102.913 12.482 103.139 12.204 103.395 12C103.651 11.796 103.951 11.694 104.295 11.694C104.575 11.694 104.803 11.76 104.979 11.892L104.871 13.116C104.851 13.196 104.819 13.252 104.775 13.284C104.735 13.312 104.679 13.326 104.607 13.326C104.543 13.326 104.451 13.318 104.331 13.302C104.211 13.282 104.099 13.272 103.995 13.272C103.843 13.272 103.707 13.294 103.587 13.338C103.471 13.382 103.367 13.444 103.275 13.524C103.183 13.604 103.099 13.702 103.023 13.818C102.951 13.934 102.883 14.066 102.819 14.214V18H101.163V11.814H102.141C102.309 11.814 102.425 11.844 102.489 11.904C102.553 11.964 102.599 12.068 102.627 12.216L102.717 12.834ZM107.822 18.096C107.542 18.096 107.294 18.056 107.078 17.976C106.862 17.892 106.68 17.774 106.532 17.622C106.384 17.47 106.272 17.286 106.196 17.07C106.12 16.854 106.082 16.61 106.082 16.338V13.002H105.5C105.412 13.002 105.336 12.974 105.272 12.918C105.212 12.862 105.182 12.778 105.182 12.666V12.018L106.172 11.838L106.508 10.236C106.552 10.056 106.674 9.966 106.874 9.966H107.738V11.85H109.334V13.002H107.738V16.23C107.738 16.402 107.778 16.538 107.858 16.638C107.942 16.738 108.06 16.788 108.212 16.788C108.292 16.788 108.36 16.78 108.416 16.764C108.472 16.744 108.52 16.724 108.56 16.704C108.6 16.68 108.636 16.66 108.668 16.644C108.704 16.624 108.74 16.614 108.776 16.614C108.824 16.614 108.864 16.626 108.896 16.65C108.928 16.67 108.96 16.706 108.992 16.758L109.49 17.55C109.262 17.73 109.004 17.866 108.716 17.958C108.428 18.05 108.13 18.096 107.822 18.096Z"
                                fill="white"/>
                            <path
                                d="M10.9584 7.41602V15.2077H13.0834V21.5827L18.0417 13.0827H15.2084L18.0417 7.41602H10.9584Z"
                                fill="white"/>
                            <defs>
                                <linearGradient id="paint1_linear" x1="5" y1="1.05391e-05" x2="125" y2="26"
                                                gradientUnits="userSpaceOnUse">
                                    <stop stop-color="#FF9900"/>
                                    <stop offset="1" stop-color="#FF5C00"/>
                                </linearGradient>
                            </defs>
                        </svg>
                    </div>);
                    break;
                case "noExperience":
                    element = (<div className={styles.JobDecorationLabelTopLeft}>
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="114"
                            height="26"
                            fill="none"
                            viewBox="0 0 114 26"
                        >
                            <rect width="114" height="26" fill="url(#paint0_linear)" rx="5"></rect>
                            <path
                                fill="#fff"
                                d="M36.142 9.294V18h-.93a.847.847 0 01-.355-.066.895.895 0 01-.282-.24l-4.338-5.52c.013.14.02.278.025.414.008.136.011.262.011.378V18h-1.59V9.294h.948c.076 0 .14.004.192.012a.495.495 0 01.276.126c.04.036.084.084.133.144l4.367 5.544a7.374 7.374 0 01-.048-.846v-4.98h1.59zm4.197 2.424c.464 0 .886.074 1.266.222.38.148.706.36.978.636.272.272.482.604.63.996.148.392.222.834.222 1.326 0 .492-.074.936-.222 1.332a2.831 2.831 0 01-.63 1.002 2.76 2.76 0 01-.978.636c-.38.148-.802.222-1.266.222-.468 0-.894-.074-1.278-.222a2.76 2.76 0 01-.978-.636 2.901 2.901 0 01-.636-1.002 3.782 3.782 0 01-.222-1.332c0-.492.074-.934.222-1.326.152-.392.364-.724.636-.996a2.76 2.76 0 01.978-.636c.384-.148.81-.222 1.278-.222zm0 5.13c.472 0 .822-.162 1.05-.486.228-.328.342-.814.342-1.458 0-.64-.114-1.122-.342-1.446-.228-.328-.578-.492-1.05-.492-.484 0-.84.164-1.068.492-.228.324-.342.806-.342 1.446 0 .644.114 1.13.342 1.458.228.324.584.486 1.068.486zm9.024-6.144v2.238h2.904v1.362h-2.904v2.286h3.732V18H47.55V9.294h5.544v1.41h-3.732zM59.919 18h-1.59a.46.46 0 01-.294-.09.729.729 0 01-.174-.21l-1.218-2.034a1.226 1.226 0 01-.156.36L55.443 17.7a.984.984 0 01-.18.21A.384.384 0 0155 18h-1.476l2.1-3.192-2.016-2.994h1.59c.12 0 .208.016.264.048a.434.434 0 01.15.156l1.212 1.962a1.42 1.42 0 01.078-.204 1.53 1.53 0 01.114-.21l.93-1.518c.096-.156.22-.234.372-.234h1.518l-2.016 2.922L59.92 18zm2.337-1.632c.156.18.324.306.504.378a1.6 1.6 0 00.588.108c.2 0 .382-.038.546-.114.164-.076.304-.194.42-.354.12-.164.212-.372.276-.624.064-.252.096-.552.096-.9 0-.344-.028-.636-.084-.876a1.668 1.668 0 00-.228-.582.838.838 0 00-.354-.318 1.057 1.057 0 00-.468-.102c-.292 0-.538.058-.738.174a1.997 1.997 0 00-.558.498v2.712zm-.096-3.744c.124-.136.256-.26.396-.372.14-.116.29-.214.45-.294.16-.084.332-.148.516-.192.184-.048.384-.072.6-.072a1.999 1.999 0 011.632.834c.2.268.356.598.468.99a4.9 4.9 0 01.168 1.344c0 .464-.064.894-.192 1.29a3.095 3.095 0 01-.534 1.02 2.507 2.507 0 01-.84.678 2.42 2.42 0 01-1.086.24c-.336 0-.622-.05-.858-.15-.232-.1-.44-.236-.624-.408v2.466H60.6v-8.184h1.02c.208 0 .346.096.414.288l.126.522zm9.22 1.554c0-.172-.024-.336-.072-.492a1.109 1.109 0 00-.217-.414c-.1-.12-.225-.214-.377-.282a1.266 1.266 0 00-.546-.108c-.397 0-.707.112-.93.336-.225.224-.37.544-.439.96h2.58zm-2.605.984c.052.58.216 1.004.492 1.272.28.268.645.402 1.093.402.228 0 .424-.026.588-.078.168-.056.314-.116.438-.18.127-.068.242-.128.342-.18a.643.643 0 01.306-.084c.127 0 .227.048.3.144l.48.6a2.68 2.68 0 01-.582.51 3.336 3.336 0 01-.66.318 3.506 3.506 0 01-.69.156 4.92 4.92 0 01-.672.048c-.432 0-.836-.07-1.212-.21a2.836 2.836 0 01-.979-.63 3.006 3.006 0 01-.654-1.038c-.16-.412-.24-.89-.24-1.434 0-.42.069-.816.204-1.188.14-.372.34-.696.6-.972.26-.276.576-.494.948-.654a3.093 3.093 0 011.26-.246c.397 0 .76.064 1.093.192a2.36 2.36 0 011.427 1.434c.136.348.205.746.205 1.194 0 .124-.006.226-.018.306a.543.543 0 01-.06.192.234.234 0 01-.115.102.6.6 0 01-.185.024h-3.709zm6.668-2.328a2.77 2.77 0 01.678-.834c.256-.204.556-.306.9-.306.28 0 .508.066.684.198l-.108 1.224c-.02.08-.052.136-.096.168a.29.29 0 01-.168.042c-.064 0-.156-.008-.276-.024a2.05 2.05 0 00-.336-.03 1.026 1.026 0 00-.72.252 1.41 1.41 0 00-.252.294c-.072.116-.14.248-.204.396V18H73.89v-6.186h.978c.168 0 .284.03.348.09s.11.164.138.312l.09.618zm4.674-1.02V18H78.46v-6.186h1.657zm.197-1.758a.91.91 0 01-.083.39 1.054 1.054 0 01-.558.534 1.029 1.029 0 01-1.11-.216 1.11 1.11 0 01-.222-.318.97.97 0 01-.078-.39c0-.14.025-.27.078-.39.056-.124.13-.232.222-.324.091-.092.197-.164.317-.216a1.029 1.029 0 011.122.216c.097.092.172.2.229.324a.91.91 0 01.084.39zm5.14 4.122c0-.172-.024-.336-.072-.492a1.109 1.109 0 00-.216-.414c-.1-.12-.226-.214-.378-.282a1.266 1.266 0 00-.546-.108c-.396 0-.706.112-.93.336-.224.224-.37.544-.438.96h2.58zm-2.604.984c.052.58.216 1.004.492 1.272.28.268.644.402 1.092.402.228 0 .424-.026.588-.078.168-.056.314-.116.438-.18l.342-.18a.643.643 0 01.306-.084c.128 0 .228.048.3.144l.48.6a2.68 2.68 0 01-.582.51 3.336 3.336 0 01-.66.318 3.506 3.506 0 01-.69.156 4.92 4.92 0 01-.672.048c-.432 0-.836-.07-1.212-.21a2.836 2.836 0 01-.978-.63 3.006 3.006 0 01-.654-1.038c-.16-.412-.24-.89-.24-1.434 0-.42.068-.816.204-1.188.14-.372.34-.696.6-.972.26-.276.576-.494.948-.654a3.093 3.093 0 011.26-.246c.396 0 .76.064 1.092.192a2.36 2.36 0 011.428 1.434c.136.348.204.746.204 1.194 0 .124-.006.226-.018.306a.543.543 0 01-.06.192.234.234 0 01-.114.102.6.6 0 01-.186.024H82.85zm6.65-2.628c.123-.12.251-.23.383-.33a2.403 2.403 0 011.482-.486c.336 0 .634.058.894.174.26.116.478.278.654.486.18.208.314.456.402.744.092.288.138.604.138.948V18h-1.65v-3.93c0-.344-.08-.61-.24-.798-.16-.192-.396-.288-.708-.288-.232 0-.45.05-.654.15-.204.1-.398.24-.582.42V18h-1.656v-6.186h1.02c.208 0 .346.096.414.288l.102.432zm9.76.66a.743.743 0 01-.144.15.462.462 0 01-.438-.018 3.234 3.234 0 00-.252-.15 1.826 1.826 0 00-.342-.15 1.452 1.452 0 00-.492-.072c-.248 0-.464.046-.648.138-.18.088-.33.216-.45.384s-.21.372-.27.612c-.056.24-.084.51-.084.81 0 .632.126 1.116.378 1.452.256.336.604.504 1.044.504.152 0 .282-.012.39-.036.112-.028.208-.062.288-.102.084-.04.156-.084.216-.132l.168-.132c.056-.04.11-.072.162-.096a.41.41 0 01.186-.042c.128 0 .228.048.3.144l.474.6a2.907 2.907 0 01-.564.51 3.06 3.06 0 01-.624.318 3.06 3.06 0 01-.648.156c-.22.032-.438.048-.654.048-.38 0-.74-.07-1.08-.21a2.618 2.618 0 01-.894-.624 3.021 3.021 0 01-.612-1.002 3.856 3.856 0 01-.222-1.356c0-.452.066-.872.198-1.26s.326-.724.582-1.008c.256-.284.572-.506.948-.666.38-.164.818-.246 1.314-.246.472 0 .886.076 1.242.228.356.152.676.372.96.66l-.432.588zm5.143.984c0-.172-.024-.336-.072-.492a1.109 1.109 0 00-.216-.414c-.1-.12-.226-.214-.378-.282a1.266 1.266 0 00-.546-.108c-.396 0-.706.112-.93.336-.224.224-.37.544-.438.96h2.58zm-2.604.984c.052.58.216 1.004.492 1.272.28.268.644.402 1.092.402.228 0 .424-.026.588-.078.168-.056.314-.116.438-.18l.342-.18a.643.643 0 01.306-.084c.128 0 .228.048.3.144l.48.6a2.68 2.68 0 01-.582.51 3.336 3.336 0 01-.66.318 3.506 3.506 0 01-.69.156 4.92 4.92 0 01-.672.048c-.432 0-.836-.07-1.212-.21a2.836 2.836 0 01-.978-.63 3.006 3.006 0 01-.654-1.038c-.16-.412-.24-.89-.24-1.434 0-.42.068-.816.204-1.188.14-.372.34-.696.6-.972.26-.276.576-.494.948-.654a3.093 3.093 0 011.26-.246c.396 0 .76.064 1.092.192a2.36 2.36 0 011.428 1.434c.136.348.204.746.204 1.194 0 .124-.006.226-.018.306a.543.543 0 01-.06.192.234.234 0 01-.114.102.6.6 0 01-.186.024h-3.708zM14.2 14.944v-.61H9.657l-.007 2.444c0 .678.579 1.222 1.3 1.222h9.1c.721 0 1.3-.544 1.3-1.222v-2.445H16.8v.611h-2.6zm6.5-5.5h-2.607V8.222L16.793 7h-2.6l-1.3 1.222v1.222H10.3c-.715 0-1.3.55-1.3 1.223V12.5c0 .678.579 1.222 1.3 1.222h3.9V12.5h2.6v1.222h3.9c.715 0 1.3-.55 1.3-1.222v-1.833c0-.673-.585-1.223-1.3-1.223zm-3.9 0h-2.6V8.222h2.6v1.222z"
                            ></path>
                            <defs>
                                <linearGradient
                                    id="paint0_linear"
                                    x1="0"
                                    x2="114"
                                    y1="0"
                                    y2="26"
                                    gradientUnits="userSpaceOnUse"
                                >
                                    <stop stopColor="#AD00FF"></stop>
                                    <stop offset="1" stopColor="#EB00FF"></stop>
                                </linearGradient>
                            </defs>
                        </svg>
                    </div>);
                    break;
                case "firstToApply":
                    element = (<JobDecorationLabelTopLeft src="/static/images/JobCardDecoration/be_the_first.svg"/>);
                    break;
                case "trendingJob":
                    element = (<JobDecorationLabelTopLeft src="/static/images/JobCardDecoration/trending.svg"/>);
                    break;
                case "star":
                    element = (<JobDecorationLabelTopRight src="/static/images/JobCardDecoration/premium_star.svg"/>);
                    break;
                default:
                    break;
            }
        }

        return element;
    }

    handleClick(jobRedirectPath, origin) {


        const self = this;

        try {

            let tmpClickedJobsIdArr = [];

            let tmpClickedJobsIdStr = localStorage.getItem("ClickedJobsId") || "";

            tmpClickedJobsIdArr = tmpClickedJobsIdStr.split(",");

            tmpClickedJobsIdArr.push(this.props.referencenumber);

            localStorage.setItem("ClickedJobsId", tmpClickedJobsIdArr.join(","))


        } catch (e) {

        }

        try {
            window.currentJobClicked = this.props.job || this.props;
        } catch (e) {

        }

        this.props.incrementJobClickCount();

        logEvent("click-job", {
            type: "click_button",
            origin: origin,
            redirectPath: jobRedirectPath,
            decoration: this.props.decoration
        });


        if (self.display_job_modal() == true) {

            self.props.app.Job_Modal.current.setState({
                job: self.props
            });

            self.props.app.Job_Modal.current.showModal(self.props);
            return;

        } else if (this.props.getProvidedEmail() || this.props.getForcefullyHideEmailPrompts()) {

            handleJobClick(jobRedirectPath, this.props.title, this.props.src, this.props.cpc || this.props.ppc, null, this.props.body, "job_list", this.props.job);

        } else {

            this.props.showEmailSignUpPopup(jobRedirectPath, "job_list", this.props.title, this.props.src, this.props.body);

        }


    }

    display_job_modal() {
        const self = this;
        const res = false;


        try {

            let {
                src, hash, app, key, job_display_rules
            } = this.props;


            if (Array.isArray(job_display_rules) == true) {

                for (let index in job_display_rules) {

                    let rule = job_display_rules[index];


                    if (rule == "email_opt_in") {

                        let ProvidedEmail = app.getProvidedEmail();

                        if (ProvidedEmail) {

                            return false

                        } else {

                            return true;

                        }


                    } else if (rule == "job_modal") {
                        return true;
                    }

                }

            }
        } catch (e) {

        }


        return res;
    }

    jobContainerCloseBtn(e) {

        let self = this;
        setTimeout(function () {
            self.setState({
                display: false
            })
        }, 500);


        let body = this.props.body;

        try {
            var div = document.createElement("div");
            div.innerHTML = body;
            body = div.textContent || div.innerText || "";
            body = body.replace(/ +(?= )/g, '').replace(new RegExp("\\.\\.\\.", "igm"), "");
            body = body.split(" ").splice(0, 30).join(" ").trim().toLowerCase();
        } catch (e) {

        }

        let payload = {
            jobTitle: this.props.title, jobSrc: this.props.src, body: body
        };


        logEvent("click-close-job", payload);

    }

    //jobElement

    trackJobView() {


        let self = this;

        //let endPoint = "http://127.0.0.1:3000/api/log-job-view";
        let endPoint = "https://jobs-bear.com/api/log-job-view";


        try {

            let jobViewHistory = localStorage.getItem("jobViewHistory") || "";

            if (jobViewHistory.search(self.props.referencenumber) > -1) {
                return;
            } else {
                jobViewHistory += "," + self.props.referencenumber;
                localStorage.setItem("jobViewHistory", jobViewHistory);
            }

        } catch (e) {
            return;
        }


        try {

            let isBot = MainApp.isBot();

            if (isBot == true) {
                return;
            }

        } catch (e) {

        }

        try {

            if (self.props.src == "serp") {
                //debugger
            }

            let metric = {
                item: self.props.job,
                name: "impression"
            }

            Engagement_Metrics.addToQueue(metric);

        } catch (e) {

        }

        try {
            if (self.props.src && self.props.src.search(/api/igm) > -1) {
                return;
            }
        } catch (e) {

        }

        try {
            if (self.props.src == "serp") {
                return;
            }
        } catch (e) {

        }


        //console.log("trackJobView", self.props.title);

        try {

            let params = {
                index: self.props.index,
                jobTitle: self.props.title,
                referencenumber: self.props.referencenumber,
                company: self.props.company,
                jobUrl: self.props.url,
                jobSrc: self.props.src

            };


            try {
                if (window.ClientVars.geo) {
                    params.geo = window.ClientVars.geo;
                }
            } catch (e) {

            }

            try {
                if (window.ClientVars.geo) {
                    params.geo = window.ClientVars.geo;
                }
            } catch (e) {

            }

            try {
                params.jobBody = self.props.body.split(" ").splice(0, 100).join(" ");
            } catch (e) {

            }

            fetch(endPoint, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(params)
            })
                .then(response => response.json())
                .then(() => {
                    // console.debug(`event logged: ${eventName}`)
                })
                .catch(error => {
                    console.trace("can't submit event to server", error);
                });
        } catch (e) {

        }


    }

    componentWillUnmount() {

        const self = this;

        const email_only_interval_key = self.state.email_only_interval_key;

        if (email_only_interval_key) {
            clearInterval(email_only_interval_key);
        }

    }

    componentDidMount() {

        let self = this;
        let AB = null;

        try {
            AB = self.props.app.getAB();
        } catch (e) {

        }


        try {
            if (AB && AB.JobCardLogo == "on" && self.props.logo && self.props.logo.length > 0 && self.props.src.search(/(neuvooApi|Reed|indeed)/igm) > -1) {


                try {

                    let logo = self.props.logo.replace("http://", "https://");

                    self.setState({
                        logo: logo
                    })

                } catch (e) {

                }

            } else if (self.props.src == "MyJobQuote") {
                let logo = self.props.logo.replace("http://", "https://");

                self.setState({
                    logo: logo
                })
            }
        } catch (e) {

        }


        if (self.props.timeOut == true) {

            setInterval(function () {

                if (window.HaveJobClick == true) {
                    self.setState({
                        display: false
                    })
                }

            }, 1000);

        }


        try {
            //self.set_display_email_only();
        } catch (e) {

        }

    }

    set_display_email_only() {

        const self = this;

        let {
            src, hash, app, key, job_display_rules
        } = this.props;

        let email_only_interval_key = null;

        const src_array = [
            "Reed_XML_CPC_UK",
            "Indeed_XML_US",
            "neuvooApiUS",
        ]

        //console.log("job_display_rules", job_display_rules, src)


        try {

            let job_display_rules_arr = [];


            if (Array.isArray(job_display_rules) == true) {

                for (let index in job_display_rules) {

                    let rule = job_display_rules[index];


                    if (rule == "email_opt_in") {

                        email_only_interval_key = setInterval(function () {

                            let ProvidedEmail = app.getProvidedEmail();

                            if (ProvidedEmail) {

                                self.setState({
                                    display: true
                                })

                            } else {

                                self.setState({
                                    display: false
                                })

                            }

                        }, 1000 * 2);

                        self.setState({email_only_interval_key: email_only_interval_key});

                    }

                }

            }

        } catch (e) {

        }


    }

    handleIntersection(event) {

        if (event.intersectionRatio > 0.9) {

            this.trackJobView();

        }

    }

    handleInViewChange = (inView, entry) => {
        //console.log("in view", entry, inView)
        if (inView) {
            this.trackJobView();
        }
    }

    render() {

        //console.log(this.props)

        /**/

        let self = this;

        let {
            display,
            title,
            src,
            location,
            city,
            company,
            app,
            body,
            decoration,
            logo,
            hash,
            key,
            job,
            job_display_rules,
        } = this.props;

        let {special_card} = job;

        //console.log("title ", title)

        try {

            if (!company || typeof company != "string") {
                company = "";
            }

        } catch (e) {

        }

        let logoMaxW = "80px"

        let DescriptionStyle = {
            "WebkitLineClamp": "2"
        };

        if (src == "cvl") {
            DescriptionStyle.WebkitLineClamp = 3;
        } else if (src == "apex_DTL_ca" || src == "apex_DTL_us" || src == "apex_DTL_gb") {
            DescriptionStyle.WebkitLineClamp = 4;
        } else if (src == "TjCpcUk") {
            DescriptionStyle.WebkitLineClamp = 2;
        } else if (src == "appcastus") {
            DescriptionStyle.WebkitLineClamp = 4;
        } else if (src == "cw") {
            DescriptionStyle.WebkitLineClamp = 3;
        } else if (src == "caterer") {
            DescriptionStyle.WebkitLineClamp = 3;
        } else if (src == "serp") {
            DescriptionStyle.WebkitLineClamp = 5;
        } else if (src == "reedUkCpa") {
            DescriptionStyle.WebkitLineClamp = 3;
        } else if (src == "PandologicAmazonXmlCpc") {
            DescriptionStyle.WebkitLineClamp = 3;
        } else if (src == "reedUkCpaDistribution") {
            DescriptionStyle.WebkitLineClamp = 4;
        } else if (src == "MyJobQuote") {
            logoMaxW = "130px";
            DescriptionStyle.WebkitLineClamp = 4;
        } else if (src == "cvReview") {
            DescriptionStyle.WebkitLineClamp = 7;
        } else if (company == "DoorDash") {
            DescriptionStyle.WebkitLineClamp = 7;
        } else if (company.search(/amazon/igm) > -1) {
            DescriptionStyle.WebkitLineClamp = 5;
        }


        let displayLocation = location || city || "";

        try {
            if (displayLocation.search(/\bnull\b/igm) > -1) {
                displayLocation = "";
            }
        } catch (e) {

        }

        let className = src + " " + " job-card-el";

        const options = {
            onChange: function (event) {
                self.handleIntersection(event);
            },
            rootMargin: '0px 0px 100px 0px',
            threshold: 1
        };


        let isJobClicked = false;

        let FirstSerpCardBorder = false;

        try {

            if (this.props.referencenumber == "serp3" && window.ClientVars.AB.FirstSerpCardBorder == true) {
                FirstSerpCardBorder = true;
            }

        } catch (e) {

        }


        try {

            if (

                (this.props.referencenumber.search(/\bserp/igm) == -1 && window.ClientVars && window.ClientVars.AB && window.ClientVars.AB.SemiTransparentJobClickVersions == "on") || (this.props.src == "jobg8_XML_gb" || this.props.src == "cvl" || this.props.src.search(/(reed|\btj)/igm) > -1)

            ) {
                let tmpClickedJobsIdArr = [];

                let tmpClickedJobsIdStr = localStorage.getItem("ClickedJobsId") || "";

                tmpClickedJobsIdArr = tmpClickedJobsIdStr.split(",");

                if (tmpClickedJobsIdArr.indexOf(this.props.referencenumber) > -1) {
                    isJobClicked = true;
                }
            }

            //console.log("this.props.src", this.props.src)

        } catch (e) {

        }

        const get_inner_card = function () {

            let res = <div></div>

            function base_card() {
                return (
                    <>
                        <ContainerDiv>

                            <Title decoration={decoration} dangerouslySetInnerHTML={{
                                __html: title
                            }}>

                            </Title>

                            {(company || location) && (<JobAttributesContainer>
                                {company && (<AttributeContainer style={{marginRight: "10px"}}>
                                    <CompanyIcon
                                        fill="#000639"
                                        fillOpacity="0.3"
                                        style={{marginRight: "4px"}}
                                    />
                                    <Company hasLoaction={true}>{company || ""}</Company>
                                </AttributeContainer>)}
                                {displayLocation ? (<AttributeContainer style={{marginLeft: "-10px"}}>
                                    <LocationIcon
                                        fill="#000639"
                                        fillOpacity="0.3"
                                        style={{marginRight: "4px"}}
                                    />
                                    <Location hasCompany={company}>{displayLocation || ""}</Location>
                                </AttributeContainer>) : (<AttributeContainer style={{marginLeft: "-10px"}}>
                                    <LocationIcon
                                        fill="#000639"
                                        fillOpacity="0.3"
                                        style={{marginRight: "4px"}}
                                    />
                                    <Location hasCompany={company}>Nearby</Location>
                                </AttributeContainer>)}
                            </JobAttributesContainer>)}

                            {(self.state.logo) && (
                                <img style={{maxWidth: logoMaxW, marginTop: "10px"}} src={self.state.logo}/>)}

                            {!self.props.hideDescription && (
                                <Description style={DescriptionStyle} dangerouslySetInnerHTML={{
                                    __html: body
                                }}></Description>)}
                        </ContainerDiv>

                        <Button decoration={decoration}>
                            {self.props.CTA ? self.props.CTA : "View Salary & More Info"}
                        </Button>
                    </>
                );
            }

            if (special_card && special_card.name == "medium_card") {

                res = <MediumCard
                    app={self.props.app}
                    timeOut={true}
                    display={true}
                    uid={"uid"}
                    showEmailSignUpPopup={self.props.showEmailSignUpPopup}
                    getProvidedEmail={self.props.getProvidedEmail}
                    getForcefullyHideEmailPrompts={self.props.getForcefullyHideEmailPrompts}
                    job={job}
                    img={special_card.img}
                    title={job.title}
                    buttonText="View job benefits"
                />

            } else {
                res = base_card()
            }

            return res

        }

        let baseJobCard = <div></div>;

        if (this.state.display == true) {


            baseJobCard =
                <JobCard
                    style={{
                        opacity: (isJobClicked ? 0.5 : 1), border: FirstSerpCardBorder ? "2px solid #6776c7" : "none"
                    }}
                    id={this.props.referencenumber}
                    out={this.state.out}
                    className={className}
                    onClick={(e) => {

                        this.handleClick(this.props.url, "click_card")
                    }}
                    decoration={decoration}>


                    {this.getTopDecorationTag()}

                    <span className="jobContainerCloseBtnList" onClick={(e) => {
                        e.stopPropagation();
                        this.setState({
                            out: true
                        });
                        this.jobContainerCloseBtn(e);
                    }}>

                      <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
        d="M11.5609 1.175L10.3966 0L5.78046 4.65833L1.16435 0L0 1.175L4.61611 5.83333L0 10.4917L1.16435 11.6667L5.78046 7.00833L10.3966 11.6667L11.5609 10.4917L6.94481 5.83333L11.5609 1.175Z"
        fill="#606FC7"/>
</svg>

                    </span>


                    <OuterContainer>
                        {get_inner_card()}
                    </OuterContainer>

                    {this.getBottomDecorationTag()}
                </JobCard>;
        }

        return (
            <InView
                as="div"
                onChange={this.handleInViewChange}
                rootMargin='0px 0px 100px 0px'
                threshold={1}
            >
                {baseJobCard}
            </InView>
        );
    }
}
